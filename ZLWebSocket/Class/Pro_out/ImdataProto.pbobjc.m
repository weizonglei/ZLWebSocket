// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IMDataProto.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ImdataProto.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImdataProtoRoot

@implementation ImdataProtoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ImdataProtoRoot_FileDescriptor

static GPBFileDescriptor *ImdataProtoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - IMData

@implementation IMData

@dynamic id_p;
@dynamic type;
@dynamic hasInitData, initData;
@dynamic hasMsgData, msgData;
@dynamic timestamp;
@dynamic expand, expand_Count;

typedef struct IMData__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *id_p;
  IMData_InitData *initData;
  IMData_MsgData *msgData;
  NSMutableDictionary *expand;
  int64_t timestamp;
} IMData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IMData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = IMData_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMData__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "initData",
        .dataTypeSpecific.className = GPBStringifySymbol(IMData_InitData),
        .number = IMData_FieldNumber_InitData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMData__storage_, initData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgData",
        .dataTypeSpecific.className = GPBStringifySymbol(IMData_MsgData),
        .number = IMData_FieldNumber_MsgData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMData__storage_, msgData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = IMData_FieldNumber_Timestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMData__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expand",
        .dataTypeSpecific.className = NULL,
        .number = IMData_FieldNumber_Expand,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMData__storage_, expand),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMData class]
                                     rootClass:[ImdataProtoRoot class]
                                          file:ImdataProtoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\010\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMData_InitData

@implementation IMData_InitData

@dynamic heartbeatMs;
@dynamic timeoutMs;
@dynamic reconnectMaxNum;
@dynamic reconnectMs;
@dynamic allowAccess;
@dynamic expand, expand_Count;

typedef struct IMData_InitData__storage_ {
  uint32_t _has_storage_[1];
  int32_t heartbeatMs;
  int32_t timeoutMs;
  int32_t reconnectMaxNum;
  int32_t reconnectMs;
  NSMutableDictionary *expand;
} IMData_InitData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "heartbeatMs",
        .dataTypeSpecific.className = NULL,
        .number = IMData_InitData_FieldNumber_HeartbeatMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMData_InitData__storage_, heartbeatMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeoutMs",
        .dataTypeSpecific.className = NULL,
        .number = IMData_InitData_FieldNumber_TimeoutMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMData_InitData__storage_, timeoutMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reconnectMaxNum",
        .dataTypeSpecific.className = NULL,
        .number = IMData_InitData_FieldNumber_ReconnectMaxNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMData_InitData__storage_, reconnectMaxNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reconnectMs",
        .dataTypeSpecific.className = NULL,
        .number = IMData_InitData_FieldNumber_ReconnectMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMData_InitData__storage_, reconnectMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allowAccess",
        .dataTypeSpecific.className = NULL,
        .number = IMData_InitData_FieldNumber_AllowAccess,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "expand",
        .dataTypeSpecific.className = NULL,
        .number = IMData_InitData_FieldNumber_Expand,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMData_InitData__storage_, expand),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMData_InitData class]
                                     rootClass:[ImdataProtoRoot class]
                                          file:ImdataProtoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMData_InitData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\nA\000\002\010A\000\003\017\000\004\nA\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(IMData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMData_MsgData

@implementation IMData_MsgData

@dynamic id_p;
@dynamic sysId;
@dynamic sessionId;
@dynamic sType;
@dynamic empSid;
@dynamic hasFromUser, fromUser;
@dynamic toUserId;
@dynamic msgType;
@dynamic customType;
@dynamic msgBody;
@dynamic sendTime;
@dynamic expand, expand_Count;

typedef struct IMData_MsgData__storage_ {
  uint32_t _has_storage_[1];
  int32_t sType;
  IMData_MsgData_FromUser *fromUser;
  NSString *msgType;
  NSString *customType;
  NSString *msgBody;
  NSMutableDictionary *expand;
  int64_t id_p;
  int64_t sysId;
  int64_t sessionId;
  int64_t empSid;
  int64_t toUserId;
  int64_t sendTime;
} IMData_MsgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sysId",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_SysId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, sysId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sType",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_SType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, sType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "empSid",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_EmpSid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, empSid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUser",
        .dataTypeSpecific.className = GPBStringifySymbol(IMData_MsgData_FromUser),
        .number = IMData_MsgData_FieldNumber_FromUser,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, fromUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_ToUserId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_MsgType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customType",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_CustomType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, customType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgBody",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_MsgBody,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, msgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_SendTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expand",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FieldNumber_Expand,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMData_MsgData__storage_, expand),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMData_MsgData class]
                                     rootClass:[ImdataProtoRoot class]
                                          file:ImdataProtoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMData_MsgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\002\005\000\003\t\000\004\005\000\005\004B\000\006\010\000\007\010\000\010\007\000\t\n\000\n\007\000\013\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(IMData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMData_MsgData_FromUser

@implementation IMData_MsgData_FromUser

@dynamic id_p;
@dynamic sysId;
@dynamic busUserId;
@dynamic nickName;
@dynamic headImg;
@dynamic expand, expand_Count;

typedef struct IMData_MsgData_FromUser__storage_ {
  uint32_t _has_storage_[1];
  NSString *busUserId;
  NSString *nickName;
  NSString *headImg;
  NSMutableDictionary *expand;
  int64_t id_p;
  int64_t sysId;
} IMData_MsgData_FromUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FromUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMData_MsgData_FromUser__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sysId",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FromUser_FieldNumber_SysId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMData_MsgData_FromUser__storage_, sysId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "busUserId",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FromUser_FieldNumber_BusUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMData_MsgData_FromUser__storage_, busUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FromUser_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMData_MsgData_FromUser__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImg",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FromUser_FieldNumber_HeadImg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMData_MsgData_FromUser__storage_, headImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expand",
        .dataTypeSpecific.className = NULL,
        .number = IMData_MsgData_FromUser_FieldNumber_Expand,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMData_MsgData_FromUser__storage_, expand),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMData_MsgData_FromUser class]
                                     rootClass:[ImdataProtoRoot class]
                                          file:ImdataProtoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMData_MsgData_FromUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\005\000\003\t\000\004\010\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(IMData_MsgData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
